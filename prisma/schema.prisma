generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    USER
}

enum ProfileMemberRoles {
    MEMBER
    OWNER
    MANAGER
    ANALYST
    EDITOR
    CONTENT_CREATOR
    CLIENT
    GUEST
}

enum PermissionFlags {
    VIEW
    VIEW_ANALYTICS
    VIEW_INBOX
    VIEW_PLANNER
    VIEW_ADS
    SMARTLINKS
    EDIT
    REPORTS
    INBOX
    ADS
    HASHTAG_TRACKER
    PLANNER
    PLAN_AND_PUBLISH
    PLAN_PENDING_REVIEW
    REVIEW_POSTS
    MANAGEMENT
    BRAND
}

enum GlobalStatus {
    ACTIVE
    INACTIVE
    DELETED
}

enum TaskStatus {
    SCHEDULED
    PENDING
    PROCESSING
    COMPLETED
    CANCELED
    FAILED
}

enum PostStatus {
    QUEUED
    COMPLETED
    CANCELED
    FAILED
    PUBLISHED
}

model User {
    id           Int          @id @default(autoincrement())
    name         String
    email        String       @unique
    password     String
    phone        String?
    role         Role         @default(USER)
    otpEnabled   Boolean      @default(false)
    otpVerified  Boolean      @default(false)
    otpSecret    String?
    otpAuthURI   String?
    globalStatus GlobalStatus @default(ACTIVE)
    createdAt    DateTime     @default(now())
    updatedAt    DateTime?    @updatedAt
    members      Member[]
    profiles     Profile[]
}

model Member {
    id           Int                @id @default(autoincrement())
    userId       Int
    profileId    Int
    role         ProfileMemberRoles @default(OWNER)
    user         User               @relation(fields: [userId], references: [id])
    profile      Profile            @relation(fields: [profileId], references: [id])
    globalStatus GlobalStatus       @default(ACTIVE)
    createdAt    DateTime           @default(now())
    updatedAt    DateTime?          @updatedAt

    @@unique([userId, profileId])
}

model Profile {
    id           Int          @id @default(autoincrement())
    name         String
    userId       Int
    members      Member[]
    socials      Social[]
    posts        Post[]
    globalStatus GlobalStatus @default(ACTIVE)
    createdAt    DateTime     @default(now())
    updatedAt    DateTime?    @updatedAt
    User         User         @relation(fields: [userId], references: [id])
    customers    Customer[]
}

model Customer {
    id           Int          @id @default(autoincrement())
    name         String
    profileId    Int // Campo obligatorio para la relación
    globalStatus GlobalStatus @default(ACTIVE)
    createdAt    DateTime     @default(now())
    updatedAt    DateTime?    @updatedAt
    Profile      Profile      @relation(fields: [profileId], references: [id]) // Relación con Profile
}

model Social {
    id           Int          @id @default(autoincrement())
    token        String
    providerId   Int
    profileId    Int
    provider     Provider     @relation(fields: [providerId], references: [id])
    profile      Profile      @relation(fields: [profileId], references: [id])
    globalStatus GlobalStatus @default(ACTIVE)
    createdAt    DateTime     @default(now())
    updatedAt    DateTime?    @updatedAt
}

enum ProviderNames {
    FACEBOOK
    INSTAGRAM
    TWITTER
    PINTEREST
}

model Provider {
    id               Int                @id @default(autoincrement())
    name             ProviderNames
    socials          Social[]
    globalStatus     GlobalStatus       @default(ACTIVE)
    createdAt        DateTime           @default(now())
    updatedAt        DateTime?          @updatedAt
    ProviderPostType ProviderPostType[]
}

model Post {
    id                 Int               @id @default(autoincrement())
    status             PostStatus
    providerPostTypeId Int?
    profileId          Int
    ProviderPostType   ProviderPostType? @relation(fields: [providerPostTypeId], references: [id])
    profile            Profile           @relation(fields: [profileId], references: [id])
    task               Task?
    fields             Json
    globalStatus       GlobalStatus      @default(ACTIVE)
    createdAt          DateTime          @default(now())
    updatedAt          DateTime?         @updatedAt
    PostType           PostType?         @relation(fields: [postTypeId], references: [id])
    postTypeId         Int?
}

model Task {
    id           Int          @id @default(autoincrement())
    status       TaskStatus
    unix         Int
    postId       Int          @unique
    post         Post         @relation(fields: [postId], references: [id])
    globalStatus GlobalStatus @default(ACTIVE)
    createdAt    DateTime     @default(now())
    updatedAt    DateTime?    @updatedAt
}

model PostType {
    id           Int          @id @default(autoincrement())
    name         String
    fields       Json
    posts        Post[]
    globalStatus GlobalStatus @default(ACTIVE)
    createdAt    DateTime     @default(now())
    updatedAt    DateTime?    @updatedAt

    ProviderPostType ProviderPostType[]
}

model ProviderPostType {
    id         Int      @id @default(autoincrement())
    providerId Int
    posttypeId Int
    provider   Provider @relation(fields: [providerId], references: [id])
    posttype   PostType @relation(fields: [posttypeId], references: [id])
    Post       Post[]
}

model Permission {
    id           Int                     @id @default(autoincrement())
    name         PermissionFlags         @unique
    profileRoles ProfileRolePermission[]
    globalStatus GlobalStatus            @default(ACTIVE)
    createdAt    DateTime                @default(now())
    updatedAt    DateTime?               @updatedAt
}

model ProfileRolePermission {
    id           Int                @id @default(autoincrement())
    profileRoles ProfileMemberRoles
    permission   Permission         @relation(fields: [permissionId], references: [id])
    permissionId Int
    globalStatus GlobalStatus       @default(ACTIVE)
    createdAt    DateTime           @default(now())
    updatedAt    DateTime?          @updatedAt

    @@unique([profileRoles, permissionId])
}

model ExportFormat {
    id        Int      @id @default(autoincrement())
    format    String
    createdAt DateTime @default(now())
}
