generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum CoreRole {
    ADMIN
    USER
}

enum TeamRole {
    TEAM_OWNER
    TEAM_MEMBER
    ANALYST
    EDITOR
    MANAGER
    CONTENT_CREATOR
    CLIENT
    GUEST
}

enum PermissionFlags {
    VIEW
    VIEW_ANALYTICS
    VIEW_INBOX
    VIEW_PLANNER
    VIEW_ADS
    SMARTLINKS
    EDIT
    REPORTS
    INBOX
    ADS
    HASHTAG_TRACKER
    PLANNER
    PLAN_AND_PUBLISH
    PLAN_PENDING_REVIEW
    REVIEW_POSTS
    MANAGEMENT
    BRAND
}

enum GlobalStatus {
    ACTIVE
    INACTIVE
    DELETED
}

model User {
    id           Int          @id @default(autoincrement())
    name         String
    email        String       @unique
    password     String
    phone        String?
    role         CoreRole     @default(USER)
    otpEnabled   Boolean      @default(false)
    otpVerified  Boolean      @default(false)
    otpSecret    String?
    otpAuthURI   String?
    globalStatus GlobalStatus @default(ACTIVE)
    createdAt    DateTime     @default(now())
    updatedAt    DateTime?    @updatedAt
    members      Member[]
    profiles     Profile[]
}

model Member {
    id           Int          @id @default(autoincrement())
    userId       Int
    profileId    Int
    role         TeamRole     @default(TEAM_OWNER)
    user         User         @relation(fields: [userId], references: [id])
    profile      Profile      @relation(fields: [profileId], references: [id])
    globalStatus GlobalStatus @default(ACTIVE)
    createdAt    DateTime     @default(now())
    updatedAt    DateTime?    @updatedAt

    @@unique([userId, profileId])
}

model Profile {
    id           Int          @id @default(autoincrement())
    name         String
    userId       Int
    members      Member[]
    socials      Social[]
    posts        Post[]
    globalStatus GlobalStatus @default(ACTIVE)
    createdAt    DateTime     @default(now())
    updatedAt    DateTime?    @updatedAt
    User         User         @relation(fields: [userId], references: [id])
}

model Social {
    id           Int          @id @default(autoincrement())
    token        String
    providerId   Int
    profileId    Int
    provider     Provider     @relation(fields: [providerId], references: [id])
    profile      Profile      @relation(fields: [profileId], references: [id])
    globalStatus GlobalStatus @default(ACTIVE)
    createdAt    DateTime     @default(now())
    updatedAt    DateTime?    @updatedAt
}

model Provider {
    id               Int                @id @default(autoincrement())
    name             String
    socials          Social[]
    globalStatus     GlobalStatus       @default(ACTIVE)
    createdAt        DateTime           @default(now())
    updatedAt        DateTime?          @updatedAt
    ProviderPostType ProviderPostType[]
}

model Post {
    id           Int          @id @default(autoincrement())
    status       String?
    postTypeId   Int?
    profileId    Int
    postType     PostType?    @relation(fields: [postTypeId], references: [id])
    profile      Profile      @relation(fields: [profileId], references: [id])
    task         Task?
    globalStatus GlobalStatus @default(ACTIVE)
    createdAt    DateTime     @default(now())
    updatedAt    DateTime?    @updatedAt
}

model Task {
    id           Int          @id @default(autoincrement())
    status       String
    unix         Int
    postId       Int          @unique
    post         Post         @relation(fields: [postId], references: [id])
    globalStatus GlobalStatus @default(ACTIVE)
    createdAt    DateTime     @default(now())
    updatedAt    DateTime?    @updatedAt
}

model PostType {
    id           Int          @id @default(autoincrement())
    name         String
    fields       Json
    posts        Post[]
    globalStatus GlobalStatus @default(ACTIVE)
    createdAt    DateTime     @default(now())
    updatedAt    DateTime?    @updatedAt

    ProviderPostType ProviderPostType[]
}

model ProviderPostType {
    id         Int      @id @default(autoincrement())
    providerId Int      @unique
    posttypeId Int      @unique
    provider   Provider @relation(fields: [providerId], references: [id])
    posttype   PostType @relation(fields: [posttypeId], references: [id])
}

model Permission {
    id           Int                  @id @default(autoincrement())
    name         PermissionFlags      @unique
    teamRoles    TeamRolePermission[]
    globalStatus GlobalStatus         @default(ACTIVE)
    createdAt    DateTime             @default(now())
    updatedAt    DateTime?            @updatedAt
}

model TeamRolePermission {
    id           Int          @id @default(autoincrement())
    teamRole     TeamRole
    permission   Permission   @relation(fields: [permissionId], references: [id])
    permissionId Int
    globalStatus GlobalStatus @default(ACTIVE)
    createdAt    DateTime     @default(now())
    updatedAt    DateTime?    @updatedAt

    @@unique([teamRole, permissionId])
}
