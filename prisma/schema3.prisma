generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CoreRole {
  ADMIN
  USER
}

enum TeamRole {
  TEAM_OWNER
  TEAM_MEMBER
  ANALYST
  EDITOR
  MANAGER
  CONTENT_CREATOR
  CLIENT
  GUEST
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  name        String
  password    String
  role        CoreRole     @default(USER)
  otpEnabled  Boolean      @default(false)
  otpVerified Boolean      @default(false)
  otpSecret   String?
  otpAuthURI  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  TeamMember  TeamMember[]
  profiles    Profile[]
}

model Team {
  id        Int          @id @default(autoincrement())
  name      String
  createdAt DateTime     @default(now())
  updatedAt DateTime?    @updatedAt
  members   TeamMember[]
  profiles  Profile[]
}

model TeamMember {
  id     Int      @id @default(autoincrement())
  userId Int
  teamId Int
  role   TeamRole @default(TEAM_MEMBER)
  user   User     @relation(fields: [userId], references: [id])
  team   Team     @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
}

model Profile {
  id             Int             @id @default(autoincrement())
  name           String
  userId         Int?
  teamId         Int?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?       @updatedAt
  socialAccounts SocialAccount[]
  user           User?           @relation(fields: [userId], references: [id])
  team           Team?           @relation(fields: [teamId], references: [id])

  @@unique([name, userId])
  @@unique([name, teamId])
}

model SocialAccount {
  id                   Int       @id @default(autoincrement())
  provider             String
  encryptedAccessToken String
  refreshToken         String?
  expiresAt            DateTime?
  profileId            Int
  profile              Profile   @relation(fields: [profileId], references: [id])
  createdAt            DateTime  @default(now())
  updatedAt            DateTime? @updatedAt

  @@unique([provider, profileId])
}
